#1 [internal] load build definition from Dockerfile
#1 sha256:4d84589c28f7a798b2029ee61b54861b4483b9d90f9b900dff7758a37b359b6b
#1 transferring dockerfile: 37B 0.0s done
#1 DONE 0.0s

#2 [internal] load .dockerignore
#2 sha256:9e4bbbcfa1030346fbe2813adf03bf7dc6befaacba7c6003f2e18ea3ffc3d23d
#2 transferring context: 2B done
#2 DONE 0.0s

#3 [internal] load metadata for docker.io/library/nginx:alpine
#3 sha256:87243556dbc4cd795e64c4878589b6fd2be81cec66efa21c4597f094b4526bec
#3 DONE 1.0s

#4 [builder 1/6] FROM docker.io/library/nginx:alpine@sha256:db353d0f0c479c91bd15e01fc68ed0f33d9c4c52f3415e63332c3d0bf7a4bb77
#4 sha256:8aaa9da84a6c2214f6415eb9fb8421699617a5929e07ed5025776b3e1003505a
#4 DONE 0.0s

#17 [internal] load build context
#17 sha256:712e161fe8d3971a9c323e69b59664234c9c8b8dd0bcf534dbb9d20f36945df6
#17 transferring context: 2.31kB done
#17 DONE 0.0s

#12 [stage-1  4/16] COPY --from=builder nginx_version.txt nginx_version.txt
#12 sha256:6947150761f604f4defa1b1f509c702e800aa6daf22aa3ca34683f0bf0e0320b
#12 CACHED

#5 [stage-1  2/16] RUN apk add --no-cache inotify-tools curl pcre ffmpeg
#5 sha256:66d1232ae6030fad6198428a79314aea945baf435576e0dcd5a5a65a5fde08d9
#5 CACHED

#13 [stage-1  5/16] RUN export NGINX_VERSION=$(cat nginx_version.txt)
#13 sha256:12bedf745871ed599304292cbc217030b34b45bf861c5d457f39940e33c868a7
#13 CACHED

#9 [builder 4/6] RUN apk update --quiet && apk add --no-cache --quiet     build-base     pcre-dev     openssl-dev     zlib-dev     wget     unzip     linux-headers
#9 sha256:8832fa91093d6a4f47c746c09d283a47c3030c22a4d903155f99d0db12626249
#9 CACHED

#8 [builder 3/6] RUN echo 1.25.3 > nginx_version.txt
#8 sha256:65fdbd033d5d0ce30224d7a5744fea1893d683f46bd741ba6c69ee1d98e784e2
#8 CACHED

#15 [stage-1  7/16] RUN chmod +x /usr/sbin/nginx
#15 sha256:8c74f26745a0fc54ef8dbc0a352a8adfd25ab8437024c142122017da412ad2b7
#15 CACHED

#7 [builder 2/6] RUN export NGINX_VERSION=$(nginx -v 2>&1 | grep -o '[0-9.]*')
#7 sha256:90de5c32493c077fb6a7db22175bd2029e27657d3924af56f0bf4aa00918bedb
#7 CACHED

#10 [builder 5/6] RUN NGINX_VERSION=$(nginx -v 2>&1 | grep -o '[0-9.]*')
#10 sha256:91647c196f4c00879ac45fae3d2d0c57133f89eb9140599977f66ddf1dcb010f
#10 CACHED

#6 [stage-1  3/16] RUN curl -sO https://dl.min.io/client/mc/release/linux-amd64/mc &&     chmod +x mc &&     mv mc /usr/bin
#6 sha256:d30a4ce7b8b600652f9c02965f5da92940a20236ce8447ec9d89c363ecd1acd9
#6 CACHED

#14 [stage-1  6/16] COPY --from=builder /nginx-1.25.3/objs/nginx /usr/sbin/nginx
#14 sha256:40a6d6a3c73de84edd6a63d17a774137b4aaede1cdb6fcd72cf1eab65f31d5ab
#14 CACHED

#16 [stage-1  8/16] RUN ls -al /usr/sbin/nginx
#16 sha256:22c02e7391b77c56477105b72b2eb955f1eae7654dbed4bdfc39a3d62f857241
#16 CACHED

#11 [builder 6/6] RUN wget -q http://nginx.org/download/nginx-1.25.3.tar.gz &&     wget -q https://github.com/arut/nginx-rtmp-module/archive/master.zip &&     tar -zxvf nginx-1.25.3.tar.gz && unzip -qq master.zip &&     cd nginx-1.25.3 &&     ./configure         --prefix=/etc/nginx         --conf-path=/etc/nginx/nginx.conf         --error-log-path=/var/log/nginx/error.log         --http-log-path=/var/log/nginx/access.log         --pid-path=/var/log/nginx/nginx.pid         --with-http_ssl_module         --add-module=../nginx-rtmp-module-master &&     make && make install
#11 sha256:bc742033257470e05790612394dde9aee15caaa74d55e6ecd76c762cab76378e
#11 CACHED

#18 [stage-1  9/16] COPY nginx.conf /etc/nginx/nginx.conf
#18 sha256:cdf318022e5b98551abdd5f31faadad2618827f0cb397c55b1e106bba13f5e5b
#18 CACHED

#19 [stage-1 10/16] COPY sh/ /app/
#19 sha256:bacd08394874b7160850591d95149a2be2cbcb5cfd0c1713787e3358f2c67548
#19 DONE 0.0s

#20 [stage-1 11/16] RUN chmod +x /app/watch_hls_dir.sh /app/exec_ffmpeg.sh
#20 sha256:6eca28af964461ca0248fe0f87023c693f804623c7f7fc62b669502778347091
#20 DONE 0.2s

#21 [stage-1 12/16] RUN mkdir -p /var/log/nginx/rtmp &&     touch /var/log/nginx/rtmp/access.log
#21 sha256:5d04306edd5e7e4f947ce8b9e5b17c3e327ccff1a788ca9f1bba539fb390cfeb
#21 DONE 0.2s

#22 [stage-1 13/16] RUN mkdir -p /var/log/ffmpeg &&     touch /var/log/ffmpeg/all.log &&     chmod -R 755 /var/log/ffmpeg
#22 sha256:b439a4a33ffc6186c02906f8238c3a4956589ff8c0ce7b9288049cb78ca7b02e
#22 DONE 0.2s

#23 [stage-1 14/16] RUN mkdir -p /var/log/hls &&     touch /var/log/hls/all.log &&     chmod -R 755 /var/log/hls
#23 sha256:40cbd4b71e6b8db65a04b6566e931f03d5341db48f50878c5ff8280fb5c9be70
#23 DONE 0.3s

#24 [stage-1 15/16] COPY sh/init.sh /app/init.sh
#24 sha256:022ef8423a5aabb85c4ed8662c16052e930252f504219b06c157a3349bfec3b7
#24 DONE 0.0s

#25 [stage-1 16/16] RUN chmod +x /app/init.sh
#25 sha256:ba59d69282d5dea7a021b7ce75ad560dbb8b5229408d6997556185ba57103bc8
#25 DONE 0.2s

#26 exporting to image
#26 sha256:e8c613e07b0b7ff33893b694f7759a10d42e180f2b4dc349fb57dc6b71dcab00
#26 exporting layers 0.1s done
#26 writing image sha256:fe1910af703c1e6794c797f2bf9b1b05d701e5cdd44c811dbdca0ea49e270c2c done
#26 naming to docker.io/library/instream-media-server done
#26 DONE 0.1s

Use 'docker scan' to run Snyk tests against images to find vulnerabilities and learn how to fix them
